name: PHPUnit Test Runner.
description: Run PHPUnit tests with coverage and configurable options.

inputs:
  additional-args:
    description: Additional PHPUnit arguments.
    default: "--log-junit junit.xml"
    required: false
    type: string
  configuration:
    description: PHPUnit configuration file.
    default: ""
    required: false
    type: string
  coverage-driver:
    description: Code coverage driver to use (pcov, xdebug, none).
    default: ""
    required: false
    type: string
  coverage-file:
    description: Coverage output file name.
    default: coverage.xml
    required: false
    type: string
  coverage-format:
    description: Coverage report format (clover, html, xml).
    default: clover
    required: false
    type: string
  coverage-token:
    description: Codecov token for uploading coverage.
    default: ""
    required: false
    type: string
  debug:
    description: Display warnings in phpunit.
    default: ""
    required: false
    type: string
  exclude-group:
    description: Exclude group from phpunit.
    default: ""
    required: false
    type: string
  group:
    description: Include specific group in phpunit.
    default: ""
    required: false
    type: string
  path:
    description: Path to PHPUnit executable.
    default: vendor/bin/phpunit
    required: false
    type: string
  test-suite:
    description: Specific test suite to run.
    default: ""
    required: false
    type: string

runs:
  using: composite
  steps:
    - name: Build PHPUnit command.
      shell: bash
      id: build-cmd
      run: |
        PHPUNIT_CMD="${{ inputs.path }} --colors=always"

        # Function to add parameter if value is not empty
        add_param() {
          if [ -n "$2" ]; then
            PHPUNIT_CMD="$PHPUNIT_CMD $1 $2"
          fi
        }

        # Add coverage if driver is specified and not 'none'
        if [ -n "${{ inputs.coverage-driver }}" ] && [ "${{ inputs.coverage-driver }}" != "none" ]; then
          PHPUNIT_CMD="$PHPUNIT_CMD --coverage-${{ inputs.coverage-format }}=${{ inputs.coverage-file }}"
        fi

        # Add other parameters
        add_param "--configuration" "${{ inputs.configuration }}"
        add_param "--testsuite" "${{ inputs.test-suite }}"
        add_param "--group" "${{ inputs.group }}"
        add_param "--exclude-group" "${{ inputs.exclude-group }}"

        # Add debug flags if specified
        if [ -n "${{ inputs.debug }}" ]; then
          PHPUNIT_CMD="$PHPUNIT_CMD ${{ inputs.debug }}"
        fi

        # Add additional arguments
        if [ -n "${{ inputs.additional-args }}" ]; then
          PHPUNIT_CMD="$PHPUNIT_CMD ${{ inputs.additional-args }}"
        fi

        echo "command=$PHPUNIT_CMD" >> $GITHUB_OUTPUT
        echo "PHPUnit command: $PHPUNIT_CMD"

    - name: Run PHPUnit tests on linux.
      shell: bash
      if: runner.os != 'Windows'
      run: ${{ steps.build-cmd.outputs.command }}

    - name: Run PHPUnit tests on windows.
      shell: pwsh
      if: runner.os == 'Windows'
      run: Invoke-Expression "${{ steps.build-cmd.outputs.command }}"

    - name: Upload test results to Codecov.
      if: ${{ !cancelled() && inputs.coverage-driver != 'none' && inputs.coverage-token != '' }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ inputs.coverage-token }}

    - name: Upload coverage to Codecov.
      if: inputs.coverage-driver != '' && inputs.coverage-driver != 'none' && inputs.coverage-token != ''
      uses: codecov/codecov-action@v5
      with:
        token: ${{ inputs.coverage-token }}
        file: ./${{ inputs.coverage-file }}
